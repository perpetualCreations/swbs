Socket Wrapper for Python 3
===========================
:Latest Version - |version|:

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Indices and tables
------------------
* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
* `Back to Projects </index.html##projects>`_

Install
-------
SWBS is available on PyPI or as a wheel file for manual installation. Install through PIP.

.. code-block:: bash

   pip install swbs

.. parsed-literal::

   wget https://github.com/perpetualCreations/swbs/releases/download/\ |release|\ /swbs-\ |release|\ -py3-none-any.whl
   pip install /path/to/wheel/file/swbs-\ |release|\ -py3-none-any.whl

.. |release| replace:: |version|

As listed in the requirements MANIFEST, SWBS depends on pycryptodomex. If this dependency has not already been installed, use PIP again.

.. code-block:: bash

   pip install pycryptodomex

Examples
--------
SWBS is designed to be used as a straight-forward, simple socket wrapper library,

.. code-block:: python

   # Server
   import swbs
   # hostname is automatically set to localhost, can be still edited
   host = swbs.Host(42069, b"A16Character????")
   host.listen()
   # you can optionally set buffer sizes
   print(host.receive(4096))
   host.send("Something silly.") # string or bytes
   host.disconnect()

.. code-block:: python

   # Client
   import swbs
   # if you haven't noticed, the key value must be 16-characters long
   # you can automatically generate one with swbs.Security.generate_key
   # the keys must be the same across client and server
   client = swbs.Client("127.0.0.1", 42069, b"A16Character????")
   client.connect()
   client.send(b"Hello world.") # string or bytes
   print(client.receive())
   client.disconnect()

...Or being thread-safe, a multi-client framework of complexity for your next server/client application.

.. code-block:: python

   # Server
   import swbs
   # notice how the class used is now Server instead of Host
   # Server instances are able to handle more than one client,
   # at the cost of using threading and being more heavy and complex
   # you can set the connection handler (function that runs upon
   # a client connecting) with a parameter, see API reference
   # for more information
   server = swbs.Server(
       42069,
       b"SilentDayWeDream",
       connection_handler = swbs.ServerClientManagers.echo
   )

.. code-block:: python

   # Client (the same as before)
   import swbs
   client = swbs.Client("127.0.0.1", 42069, b"SilentDayWeDream")
   client.connect()
   client.send(b"Hello world.")
   print(client.receive())
   client.disconnect()

There is an extended wealth of example scripts under the tests directory of the source Github repository. See project homepage for link.
The ServerClientManagers class comes with example client managers. See API reference for more information.

As mentioned in the Security section, AES encryption/decryption can be disabled by initializing an Instance derivative (Host/Client/Server class) with None as the key parameter.

.. code-block:: python

   # Another previous example
   import swbs
   host = swbs.Host(port = 42069, key = None)
   host.listen()
   print(host.receive())
   host.send("Something silly.")
   host.disconnect()

.. code-block:: python

    # Example from before, with AES disabled
    import swbs
    client = swbs.Client("127.0.0.1", 42069, None)
    client.connect()
    client.send(b"Hello world.")
    print(client.receive())
    client.disconnect()

AES encryption/decryption can also be disabled for specific send/receive function calls.

.. code-block:: python

   # Another previous example
   import swbs
   host = swbs.Host(42069, b"SilentDayWeDream")
   host.listen()
   print(host.receive(no_decrypt = True))
   host.send("Something silly.")
   host.disconnect()

.. code-block:: python

    # Another example, with AES disabled
    import swbs
    client = swbs.Client("127.0.0.1", 42069, b"SilentDayWeDream")
    client.connect()
    client.send(b"Hello world.", no_encrypt = True)
    print(client.receive())
    client.disconnect()

See API reference for supplementary information regarding usage of components.

Instance
--------
Instance is the parent class of all front-facing classes (Server/Client/Host).
It contains the basics of a SWBS instance.

The default timeout of the socket generated by an Instance class initializing is 5 seconds. Instance will initialize with blocking set to True.

End-users can use the Instance class to create their own derivative classes with the same base framework features.

Derivatives
-----------
Host is designed for single-client applications. It's simple, and quick to implement.

As seen in the example before, after initializing the server should begin listening for a client.
Once a client has connected, it stops listening.
The end-user can invoke the send and receive functions, or disconnect, closing the connection.

The disconnect function is the same as the socket restart function, and both will work under an Instance derivative.

Server is designed for multi-client applications. It's the opposite of Host: complex, and requires more care to use.

The class initializes with two additional parameters in particular.
As stated in API reference, the connection handler parameter is the function name (without a tuple at the end) called into a thread with each client.
The other parameter signals whether the Server class should not immediately start listening, by default it will.

The server class also has a few more class variables, namely one for the connection handler parameter, an integer that upticks with every new client connection, and a dictionary containing active client instances.
The clients handled variable besides serving as a statistical metric, works to be the "client ID" of a connection instance, and is used as the key for the dictionary.
More information in the API reference.

Additionally, users can create their own connection handlers, either by creating a function or deriving from the template ClientManager class under ServerClientManagers.
Specified in reference are the required positional arguments.
Custom handlers should have a thread, loop, or try/except statement checking for BaseException that would occur if the client disconnected.
The template class comes with a blocking function that does exactly this by sending HEX 00 to the client every second, looking for an exception.

Security
--------
Data exchanged by SWBS is encrypted with AES.
This is optional, initialize an Instance derivative (Host/Client/Server) with None as the key parameter.
It's also possible to disable encryption/decryption for specific send/receive operations by specifying no_encrypt/no_decrypt as True for send/receive built-in class functions.

The client and server must have the same key string beforehand, to communicate.
The key must be 16 characters long. When supplied to an Instance derivative, under the key parameter, the input can be either a string or bytes object or a string containing a path to a plaintext-encoded file.
If the key parameter is the second option, parameter key_is_path must be set to True.

See API reference for more information.

Server Class Troubleshooting
----------------------------
If you're using the SWBS server class, please note that initializing a server instance is **non-blocking**.

The class launches the listener as a Daemon thread, the program will exit if there is no further execution.
A hack to solve this would be to run a while loop after initializing the server. The server will then run infinitely until stopped.

SWBS API
========

API
---
Details API structures under parent swbs.* and their usage.

Front-Facing
------------
.. autoclass:: swbs.Server
   :special-members: __init__
   :members:

.. autoclass:: swbs.Host
   :special-members: __init__
   :members:

.. autoclass:: swbs.Client
   :special-members: __init__
   :members:

Special and Backend
-------------------
.. autoclass:: swbs.ServerClientManagers
   :members:

.. autoclass:: swbs.Instance
   :special-members: __init__
   :members:

.. autoclass:: swbs.Security
   :members:

.. autoclass:: swbs.Interface
   :members:

Exceptions
----------
.. autoclass:: swbs.Exceptions
   :members:
